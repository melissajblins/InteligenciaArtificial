# -*- coding: utf-8 -*-
"""Pratica2_IA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AFzlj-4oC0Nl-m9YoTRMdyY7PfdZ4p4C

# Prática 2 - Inteligência Artificial


1. Definir IA x IA
2. Definir IA x Humano
3. Definir Max Alpha Beta
4. Definir Min Alpha Beta

---
**Nome**: Melissa Junqueira de Barros Lins

**RA**: 11201920583


---
*Links*

**Alpha-Beta**: https://stackabuse.com/minimax-and-alpha-beta-pruning-in-python/

## Jogo da velha

***Retorno da função acabou***
*  x, se x ganhou.
*  o, se o ganhou.
* -, se empatou.
* ' ', se ainda não acabou.

***Retorno das funções jog_min e jog_max***
* Uma tupla com os valores:
    * 1º valor: Pontuação do estado
    * 2º valor: Posição do 1º valor
"""

#Código
def iniciar():
  return [[' '] * 3 for _ in range(3)]

def desenhar(estado):
  for i in range(3):
    print('|', end = '')
    for j in range(3):
      print('{}|'.format(estado[i][j]), end ='')
    print()
  print()

def acabou(estado):
  #Checando vitorias horizontais e verticais
  for i in range(3):
    if estado[i] == ['x'] * 3:
      return 'x'
    if estado[i] == ['o'] * 3:
      return 'o'
    if estado[0][i] != ' ' and estado[0][i] == estado[1][i] and estado[1][i] == estado[2][i]:
      return estado[0][i]
    
  #Checando a diagonal principal
  if estado[0][0] != ' ' and estado[0][0] == estado[1][1] and estado[1][1] == estado[2][2]:
    return estado[0][0]

  #Checando a diagonal invertida
  if estado[0][2] != ' ' and estado[0][2] == estado[1][1] and estado[1][1] == estado[2][0]:
    return estado[0][2]

  #Retornando se ainda não acabou
  if ' ' in estado[0] + estado[1] + estado[2]:
    return ' '

  #Retornando o empate
  return '-'

def jog_max(estado):
  final = acabou(estado)
  if final == 'x':
    return(1, (-1, -1))
  if final == 'o':
    return(-1, (-1, -1))
  if final == '-':
    return(0, (-1, -1))

  maior = -2 
  for i in range(3):
    for j in range(3):
      if estado[i][j] == ' ':
        estado[i][j] = 'x'
        (pontuacao, (jog_x, jog_y)) = jog_min(estado)
        if pontuacao > maior:
          maior = pontuacao
          melhor_jogada = (i, j)
        estado[i][j] = ' '

  return(maior, melhor_jogada)

def jog_min(estado):
  final = acabou(estado)
  if final == 'x':
    return(1, (-1, -1))
  if final == 'o':
    return(-1, (-1, -1))
  if final == '-':
    return(0, (-1, -1))

  menor = 2
  for i in range(3):
    for j in range(3):
      if estado[i][j] == ' ':
        estado[i][j] = 'o'
        (pontuacao, (jog_x, jog_y)) = jog_max(estado)
        if pontuacao < menor:
          menor = pontuacao
          melhor_jogada = (i, j)
        estado[i][j] = ' '

  return(menor, melhor_jogada)

"""## Função IA x IA


> O retorno sempre será 0(0,0) pois são dois jogadores perfeitos. Ou seja, para qualquer caso sempre dará empate.


"""

def jogar_ia_vs_ia():
  estado = iniciar()
  desenhar(estado)
  #Exemplificando o empate
  print(jog_max(estado), end = "\n")
  #IA x IA
  flag = False
  while (flag == False):
      pontuacao, jogada_IA = jog_min(estado)
      estado[jogada_IA[0]][jogada_IA[1]] = 'o'
      desenhar(estado)
      pontuacao, jogada_IA = jog_max(estado)
      estado[jogada_IA[0]][jogada_IA[1]] = 'x'
      desenhar(estado)
      resultado_final = acabou(estado)
      if (resultado_final != ' '):
        flag = True
  
  print("=" * 20)
  print("  Resultado final  ")
  print("=" * 20)

  desenhar(estado)
  if (resultado_final == 'x'):
    print("Max ganhou!")
  elif (resultado_final == 'o'):
    print("Min ganhou!")
  else:
    print("O jogo empatou!")

jogar_ia_vs_ia()

"""## Função IA x Humano

"""

def jogar_ia_vs_humano():
  estado = iniciar()
  desenhar(estado)
  flag = False
  while (flag == False):
      checa_jogada = False
      while (checa_jogada == False):
        jogada_linha = int(input("Digite a linha de sua jogada ([0-2])."))
        jogada_coluna = int(input("Digite a coluna de sua jogada ([0-2]). "))
        if (jogada_linha >= 0 and jogada_linha <= 2) and (jogada_coluna >= 0 and jogada_coluna <= 2) and estado[jogada_linha][jogada_coluna] == ' ':
          checa_jogada = True
      estado[jogada_linha][jogada_coluna] = 'x'
      desenhar(estado)
      pontuacao, jogada_IA = jog_min(estado)
      estado[jogada_IA[0]][jogada_IA[1]] = 'o'
      desenhar(estado)
      resultado_final = acabou(estado)
      if (resultado_final != ' '):
        flag = True
  
  print("=" * 20)
  print("  Resultado final  ")
  print("=" * 20)

  desenhar(estado)
  if (resultado_final == 'x'):
    print("Você ganhou!")
  elif (resultado_final == 'o'):
    print("Você perdeu!")
  else:
    print("O jogo empatou!")

jogar_ia_vs_humano()

"""## Alpha Beta
Alfa-beta é na verdade um minimax aprimorado usando uma **heurística**. Ele para de avaliar um movimento quando se certifica de que ele é pior do que o movimento examinado anteriormente.


> Alpha: Melhor opção já explorada para o jogador Max.

> Beta: Melhor opção já explorada para o jogador Min.

### Função Max Alpha Beta
"""

def jog_max_alpha_beta(estado, alpha = -2, beta = 2):
  final = acabou(estado)
  if final == 'x':
    return(1, (-1, -1))
  if final == 'o':
    return(-1, (-1, -1))
  if final == '-':
    return(0, (-1, -1))

  maior = -2 
  
  for i in range(3):
    for j in range(3):
      if estado[i][j] == ' ':
        estado[i][j] = 'x'
        (pontuacao, (jog_x, jog_y)) = jog_min_alpha_beta(estado, alpha, beta)
        if pontuacao > maior:
          maior = pontuacao
          melhor_jogada = (i, j)
        estado[i][j] = ' '
        if (maior >= beta):
          return (maior, melhor_jogada)
        if (maior > alpha):
          alpha = maior

  return(maior, melhor_jogada)

"""### Função Min Alpha Beta"""

def jog_min_alpha_beta(estado, alpha = -2, beta = 2):
    final = acabou(estado)
    if final == 'x':
      return(1, (-1, -1))
    if final == 'o':
      return(-1, (-1, -1))
    if final == '-':
      return(0, (-1, -1))

    menor = 2
    for i in range(3):
      for j in range(3):
        if estado[i][j] == ' ':
          estado[i][j] = 'o'
          (pontuacao, (jog_x, jog_y)) = jog_max(estado)
          if pontuacao < menor:
            menor = pontuacao
            melhor_jogada = (i, j)
          estado[i][j] = ' '
          if (menor <= alpha):
            return (menor, melhor_jogada)
          if (menor < beta):
            beta = menor

    return(menor, melhor_jogada)